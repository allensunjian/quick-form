import"core-js/modules/es.array.includes.js";import Dires from"./utils/directives";import{h,withDirectives,resolveDirective}from"vue";import{ElForm,ElFormItem,ElButton,ElSelect,ElOption,ElInput,ElInputNumber,ElRadio,ElCheckbox,ElUpload,ElIcon,ElDatePicker,ElTimePicker,ElSwitch}from"element-plus";import{CirclePlus,Download,Delete}from"@element-plus/icons-vue";let _app=null;const _EVENT_="formChange",_FROM_EVENT_="formEvent",EVENT_CHANGE="change",TEXT_EL="span",FROM_INS="_quickFrom",FROM_C="quick-form__label--container",FROM_C_EL="div",FORM_EL_IMG="img",HandleProps=["children","options","directives","formElementType","formElementLabel","key","tirrgerEvents","textValue","currentPropPath","itemStyle","preventDefaultEvent","component","slotOptions","optionLabelKey","optionValueKey","mainType","subType","mountModelValue","showControll","childrenOptions"],TemplateReg=/\{\{.*?\}\}/g,emitVal=scope=>(type,key)=>(val,mergeObject={})=>{scope.$emit(_EVENT_,{type:type,key:key,val:val,...mergeObject})},emitEvent=scope=>(type,key)=>val=>{scope.$emit(_FROM_EVENT_,{type:type,key:key,val:val})},Throttling=function(dely,fn){let timer=null;return function(...argus){timer&&clearTimeout(timer),timer=setTimeout(()=>{fn.apply(void 0,argus),clearTimeout(timer)},dely)}},VnodeImg={props:{imgOption:{type:Object,default:()=>({})},imgData:{type:Object,default:()=>({})},imgControll:{type:Array,default:()=>[]},showControll:{type:Boolean,default:!0},currentIndex:{type:Number,default:null}},render(){const myThis=this,option=myThis.imgOption,controll=myThis.imgControll;var showC=myThis.showControll;const currentIndex=myThis.currentIndex,controllMap={preview:()=>ElementCreator.icon({children:[CirclePlus],...iconConf,onClick:eventClick("preview")}),download:()=>ElementCreator.icon({children:[Download],...iconConf,onClick:eventClick("download")}),delete:()=>ElementCreator.icon({children:[Delete],...iconConf,onClick:eventClick("delete")})};var vnode=()=>h(FORM_EL_IMG,{src:myThis.imgData.url,height:100,...option,class:"quick-form__imglist--item"});const iconConf={size:16,color:"#fff"},eventClick=type=>()=>{myThis.$emit("imgEvent",type,currentIndex)};return h(FROM_C_EL,{class:"quick-form__imglist--itemwarp",style:"height: 100px"},showC&&0<controll.length?[vnode(),h(FROM_C_EL,{class:"quick-form__imglist--itemModal"},(()=>Array.isArray(controll)?controll.map(controlStr=>controlStr in controllMap?controllMap[controlStr]():""):[])())]:[vnode()])}},VnodeImgList={props:{listOption:{type:Object,default:()=>({})},imgList:{type:Array,default:()=>[]}},render(){const myThis=this,option=myThis.listOption;let List=myThis.imgList;Array.isArray(List)||(List=[],console.error("传入的图片数据结构不是个数组！"));function event(type,index){myThis.$emit(type,index)}return h(FROM_C_EL,{class:FROM_C},List.map?List.map((imgObj,index)=>h(VnodeImg,{imgData:imgObj,imgOption:option.itemStyle||{},imgControll:option.controll,showControll:"boolean"!=typeof option.showControll||option.showControll,currentIndex:index,onImgEvent:event})):[])}},ElementCreator={switch:(option,utils)=>{utils.emit("change",option.key);var HandleProps=utils.clearHandleProps(option);return utils.parseDirective(h(ElSwitch,{...HandleProps,...utils.createEventMap(option,utils),modelValue:utils.getModelValue(option)}),option,utils)},time:(option,utils)=>{const EmitEvent=utils.emit("change",option.key);var HandleProps=utils.clearHandleProps(option);return utils.parseDirective(h(ElTimePicker,{...HandleProps,...utils.createEventMap(option,utils),modelValue:utils.getModelValue(option),"onUpdate:modelValue":Throttling(50,function(val){utils.upDateFromData(val,option.mountModelValue||option.key),EmitEvent(val)})}),option,utils)},date:(option,utils)=>{var HandleProps=utils.clearHandleProps(option);const EmitEvent=utils.emit("change",option.key);return utils.parseDirective(h(ElDatePicker,{...HandleProps,...utils.createEventMap(option,utils),modelValue:utils.getModelValue(option),"onUpdate:modelValue":Throttling(50,function(val){utils.upDateFromData(val,option.mountModelValue||option.key),EmitEvent(val)})}),option,utils)},imgList:(option,utils)=>{const Emit=utils.emitEvent("formEvent",option.formElementType);return utils.parseDirective(h(VnodeImgList,{imgList:utils.GetParentModelVal(option.currentPropPath),listOption:option,...option,onPreview:function(index){Emit({type:"preview",key:option.key,index:index})},onDelete:function(index){Emit({type:"delete",key:option.key,index:index})},onDownload:function(index){Emit({type:"download",key:option.key,index:index})}}),option,utils)},upload:(option,utils)=>{const IsDetail="detail"==option.subType;var HandleProps=utils.clearHandleProps(option);let _accept=option.accept;_accept&&Array.isArray(_accept)&&(delete option.accept,_accept=_accept.join(","));function mountFileList(option){const fileListDepend=option.mountModelValue||option.key,{name,url}=option.alias||{name:"name",url:"url"};return(utils.scope.formData[fileListDepend]||[]).forEach(item=>{"name"in item&&"url"in item||(item.name=item[name],item.url=item[url])}),{fileList:(()=>{if(!(fileListDepend in utils.scope.formData))return console.warn("invalid depend key "+fileListDepend),[];try{return utils.scope.formData[fileListDepend]}catch(error){return console.warn("invalid depend key "+fileListDepend),[]}})()}}HandleProps=IsDetail?{class:"quick-form__upload--detail",...mountFileList(option),...utils.createEventMap(option,utils)}:{...utils.createEventMap(option,utils),...mountFileList(option),...HandleProps};return utils.parseDirective(h(ElUpload,{...HandleProps,accept:_accept},()=>IsDetail?[]:utils.createElementDeep(option)),option,utils)},icon:option=>{let children=[];var handleProps=ClearHandleProps(option);try{children=(option.children||[]).map(vnodeRender=>h(vnodeRender))}catch(error){children=[]}return h(ElIcon,{...handleProps},()=>children)},text:(option,utils)=>{let modelValue,EventMap;utils&&utils.getModelValue&&(modelValue=utils&&utils.getModelValue(option),EventMap=utils.createEventMap(option,utils));var handleProps=utils.clearHandleProps(option);return utils.parseDirective(h(TEXT_EL,{...EventMap,...handleProps},[utils.parseTempSyntax(option.textValue)||modelValue||""]),option,utils)},container:(options,utils)=>{var HandleProps=utils.clearHandleProps(options);return utils.parseDirective(h("div",{...utils.createEventMap(options,utils),...HandleProps},utils.createElementDeep(options)),options,utils)},inputNumber:(option,utils)=>utils.parseDirective(h(ElInputNumber,{modelValue:utils.getModelValue(option),...utils.createEventMap(option,utils),...option}),option),radio:(option,utils)=>{const textChilren=option.children;return delete option.children,utils.parseDirective(h(ElRadio,{modelValue:utils.getModelValue(option),onClick:Throttling(50,()=>{utils.upDateFromData(option.label,option.mountModelValue||option.key)}),...option},()=>textChilren),option,utils)},checkbox:(option,utils)=>{const textChilren=option.children;return delete option.children,utils.parseDirective(h(ElCheckbox,{modelValue:!!Array.isArray(utils.getModelValue(option))&&0<=utils.getModelValue(option).indexOf(option.label),onClick:Throttling(50,function(){const ModelData=utils.getModelValue(option);var hasIndex=ModelData.indexOf(option.label);0<=hasIndex?ModelData.splice(hasIndex,1):ModelData.push(option.label)}),...option},()=>textChilren),option,utils)},input:(option,utils)=>{if("number"==option.subType)return ElementCreator.inputNumber(option,utils);var handleProps=utils.clearHandleProps(option);return utils.parseDirective(h(ElInput,{modelValue:utils.getModelValue(option),...utils.createEventMap(option,utils),placeholder:option.placeholder,type:option.subType||"text",...handleProps}),option,utils)},select:(option,utils)=>{var handlerPorps=utils.clearHandleProps(option),options=option.options;const optEls=[],lableKey=option.optionLabelKey||"label",valueKey=option.optionValueKey||"value";return[options=[]]=[utils.getComponentDeps(options)],(options||[]).forEach(item=>{item=h(ElOption,{value:item[valueKey],label:item[lableKey]});optEls.push(item)}),utils.parseDirective(h(ElSelect,{modelValue:utils.getModelValue(option),...utils.createEventMap(option,utils),...handlerPorps},()=>optEls),option,utils)},button:(options,utils)=>{var handleProps=utils.clearHandleProps(options);return utils.parseDirective(h(ElButton,handleProps,()=>utils.createElementDeep(options)),options,utils)},formFrame:(options,utils)=>{const FormChildren=[];var Layout=utils.GetLayout();return options.forEach((item,index)=>{FormChildren.push(ElementCreator.formItemFrame(item,utils,index))}),h(ElForm,{rules:utils.scope.rules,model:utils.scope.formData,ref:FROM_INS,...Layout},()=>0==FormChildren.length?h("div",{class:"quick-form__state--align--center quick-form__fc--light"},["请设置表单元素"]):FormChildren)},formItemFrame:(option,utils,index)=>{var formElementType=option.formElementType||"container",formElementLabel=option.formElementLabel,key=option.key;const getTypes=utils.GetCombinationType(formElementType);if("slot"==getTypes.mainType){if(!(getTypes.subType&&getTypes.subType in ElementCreator))return!getTypes.subType&&option.component?utils.renderComponents(option):ElementCreator.container({children:[getTypes.subType?"无法找到插槽："+getTypes.subType:"请传入自定义组件"]},utils);ElementCreator[getTypes.subType](option,utils)}var handler1,handler2,formElementType=utils.clearHandleProps(option);return utils.parseDirective(h(ElFormItem,(handler1={...mountDrag(utils,index),prop:key,label:utils.parseTempSyntax(formElementLabel),...formElementType},handler2=utils.GetDrag()?{class:"el-form-item__drag"}:{},Object.keys(handler2).forEach(key=>{"class"==key&&(handler1[key]=(handler1[key]||"")+(" "+handler2[key]))}),handler1),()=>[((eltype,options,utils)=>{if(eltype in ElementCreator){const retChildVnodes=[],vnodeOptions=options.childrenOptions;return Array.isArray(vnodeOptions)&&"text"!==eltype?(delete options.childrenOptions,vnodeOptions.forEach(option=>{var getTypes=option.formElementType?utils.GetCombinationType(option.formElementType):{};option.formElementType&&(eltype=getTypes.mainType),retChildVnodes.push(ElementCreator[eltype]({key:options.key,...option,...getTypes},utils))}),retChildVnodes):[ElementCreator[eltype]({...options,...getTypes},utils)]}return[]})(getTypes.mainType,{...option,...getTypes},utils)]),option,utils)}},mountDrag=(()=>{let start_index=-1,end_index,start_drag=!1;const dragClass="quick-form__state--drag_here",setEffect=e=>{e.dataTransfer.dropEffect="move"};return(utils,index)=>{var drag=utils.GetDrag();return drag?{style:drag?"position: relative":"",draggable:!0,onDrag:e=>(setEffect(e),start_drag=!0,start_index=index,e.preventDefault()),onDragover:e=>(setEffect(e),e.target.classList.add(dragClass),e.preventDefault()),ondragleave:e=>(e.target.classList.remove(dragClass),start_drag?e.preventDefault():!1),onDrop:e=>{e.target.classList.remove(dragClass),start_drag=!1,end_index=index,utils.positionChanger(start_index,end_index),start_index=-1}}:{}}})(),UperHelper=etype=>{const etypeArr=etype.split("");return"on"+etypeArr.shift().toUpperCase()+etypeArr.join("")},ClearHandleProps=options=>{const OriginalProps={};return Object.keys(options).forEach(curKey=>{HandleProps.includes(curKey)||(OriginalProps[curKey]=options[curKey])}),OriginalProps},eventMap=(()=>{const inputEvents=["input","change","blur","mouseover","mouseenter"],selectEvents=(inputEvents.default="input",["change"]),textEvents=(selectEvents.default="change",["click"]),uploadEvents=(textEvents.default="click",["preview","remove","success","error","progress","change","exceed","upload","remove"]),containerEvents=(uploadEvents.default="change",["click","mouseover","mouseenter"]),checkboxEvents=[containerEvents.default="click","mouseover","mouseenter","change"],radioEvents=["click","mouseover","mouseenter",checkboxEvents.default="change"],dateEvents=[radioEvents.default="click","mouseover","mouseenter","change","blur","focus","calendarChange","panelChange","visibleChange"],timeEvents=["click","mouseover","mouseenter",dateEvents.default="change","blur","focus","calendarChange","panelChange","visibleChange"],switchEvents=["click","mouseover","mouseenter",timeEvents.default="change"],LIB=(switchEvents.default="change",{input:inputEvents,select:selectEvents,text:textEvents,upload:uploadEvents,container:containerEvents,checkbox:checkboxEvents,radio:radioEvents,date:dateEvents,time:timeEvents,switch:switchEvents});return{getEvents:(elType,etype)=>{if(elType in LIB){if(Array.isArray(etype)){const retEvents=[],defaultEvent=LIB[elType].default;var defaultEventMap={originalEvent:defaultEvent,mountEvent:UperHelper(defaultEvent)};return etype.forEach(strEvents=>{strEvents!=defaultEvent&&(LIB[elType].includes(strEvents)?retEvents.push({originalEvent:strEvents,mountEvent:UperHelper(strEvents)}):console.warn("未在元素类型："+elType+"找到："+etype+"方法"))}),retEvents.push(defaultEventMap),retEvents}return LIB[elType].default||console.warn("can not found default event in "+elType),[{originalEvent:LIB[elType].default,mountEvent:UperHelper(LIB[elType].default)}]}return console.warn("未定义:"+elType+"元素类型"),[]},getDefaultEvent:elType=>LIB[elType]?.default}})(),Methods={methods:{getFrom(){return this.$refs[FROM_INS]},addItem(item){this.quickOptions.formOptions.push(item),this._updateComponents()},_updateComponents(){const myThis=this;myThis.$nextTick(()=>{myThis.$forceUpdate()})},resetRules(resourceRules){if("StateLib"+this._raw in window){const hideItemKeys=window["StateLib"+this._raw].getDeleteKey();var newRules=Object.keys(resourceRules).reduce((ref,cur)=>(-1==hideItemKeys.indexOf(cur)&&(ref[cur]=resourceRules[cur]),ref),{});this.$emit("ruleChange",newRules)}return new Promise((resolve,reject)=>{setTimeout(()=>{resolve("")},200)})}}},_Data={data:()=>({_quickOptions:{},defaultValue:"未匹配到key",_raw:(new Date).getTime()})},Props={props:{formData:{type:Object,default:()=>({})},quickOptions:{type:Object,default:()=>({})},depOptions:{type:Object,default:()=>({})},rules:{type:Object,default:()=>({})}}},MountMainUtils=function(myThis){const _emitVal=emitVal(myThis),_emitEvent=emitEvent(myThis),_UTILS={},GetCombinationType=type=>{type=type.split(":");return{mainType:type[0],subType:type[1]}},getModelValue=key=>{let _key=null,_mountValue=void 0;return key?("string"==typeof key?_key=key:(_key=key.key,_mountValue=key.mountModelValue),(_key=_mountValue&&_mountValue in myThis.formData?_mountValue:_key)in myThis.formData?myThis.formData[_key]:null):null},createEventMap=(option,utils)=>{if(!option.formElementType)return{};const mainType=GetCombinationType(option.formElementType).mainType,eventList=eventMap.getEvents(mainType,option.tirrgerEvents),events={};return eventList.forEach(({mountEvent,originalEvent})=>{const EmitEvent=_emitVal(originalEvent,option.key);var defaultEvent=eventMap.getDefaultEvent(mainType);events[mountEvent]=originalEvent==defaultEvent?(val,e)=>{if(option.preventDefaultEvent||utils.upDateFromData(val,option.mountModelValue||option.key),"select"==option.formElementType){const valueKey=option.optionValueKey||"value",lableKey=option.optionLabelKey||"label",redundantKeys=option.redundantKeys||[];var selectItem=utils.getComponentDeps(option.options).filter(option=>option[valueKey]==val).map(option=>({value:option[valueKey],label:option[lableKey],...redundantKeys.reduce((ref,cur)=>(ref[cur]=option[cur],ref),{})}));return EmitEvent(val,{option:selectItem[0]})}EmitEvent(val)}:EmitEvent}),events},GetLayout=()=>myThis.quickOptions.layout,GetDrag=()=>Boolean(myThis.quickOptions.drag),upDateFromData=(val,key)=>{key in myThis.formData&&(val instanceof Event||(myThis.formData[key]=val))},getMountModelValue=option=>{const retMap={};var key=option.mountModelValue;return"string"==typeof key&&(retMap[key]=myThis.formData[option.key]),retMap},createElementDeep=options=>{const children=options.children||[],targetProp=options.key,currentPropPath=[...options.currentPropPath||[],targetProp],retMap=[];if(Array.isArray(children))return children.forEach(child=>{if("string"==typeof child)return retMap.push(ElementCreator.text({textValue:child},_UTILS));var elType=child.formElementType;elType in ElementCreator?(child.currentPropPath=currentPropPath,retMap.push(ElementCreator[elType]({...child,key:targetProp},_UTILS))):console.warn("validate child option:"+JSON.stringify(child))}),retMap},GetParentModelVal=path=>{var path=path.shift(),propValue=getModelValue(path);return propValue==myThis.defaultValue&&console.warn("can not found parent prop "+path),propValue},ParseDirective=(vnode,options,utils)=>{const directives=options.directives;if(Array.isArray(directives)){const s=directives.map(ds=>{const directive=ds[0],QueryString="_UTILS.scope.formData",QueryDepString="_UTILS.scope.depOptions",condition=ds[1].replace(new RegExp("scope","g"),QueryString).replace(new RegExp("depScope","g"),QueryDepString);return[resolveDirective(directive),eval(condition),utils,options.key]});vnode=withDirectives(vnode,s)}return vnode},RenderComponents=options=>{var slotOptions=options.slotOptions||{};const props=slotOptions.props||[],receiver=slotOptions.receiver||[];slotOptions=props.reduce((ref,cur,index)=>{try{ref[cur.prop]={..._UTILS.scope.formData,..._UTILS.scope.depOptions}[cur.value]}catch(error){console.log(error)}return ref},{});const Emit=_UTILS.emitEvent("formEvent",options.formElementType);var CreateReceiver=receiver.reduce((ref,cur,index)=>(ref[UperHelper(cur)]=function(value){Emit({type:cur,key:options.key,value:value})},ref),{});return ParseDirective(h(options.component,{...slotOptions,...CreateReceiver}),options,_UTILS)},GetComponentDeps=depName=>"string"==typeof depName?depName in myThis.depOptions?myThis.depOptions[depName]:(console.warn("invalid depName:"+depName),[]):Array.isArray(depName)?depName:void console.warn("invalid depName type:"+typeof depName+", must be Array or String"),ParseTempSyntax=function(val){if("string"==typeof val){const parseArr=val.match(TemplateReg);parseArr&&0<parseArr.length&&parseArr.map(parseString=>{var str=parseString.replace("{{","").replace("}}",""),str=Object.assign({},_UTILS.scope.formData,_UTILS.scope.depOptions)[str];val=val.replace(parseString,str)})}return val},RulesState=(()=>{const deleteKeys=[];return{resetState(key,state){var index=deleteKeys.indexOf(key);state?0<=index&&deleteKeys.splice(index,1):-1==index&&deleteKeys.push(key)},getDeleteKey(){return deleteKeys},resetRules(type){window["StateLib"+myThis._raw]=this}}})(),PositionChanger=function(start,end){const QuickFormItemOptions=myThis.quickOptions.formOptions;var StartConf;0<=start&&0<=end&&start!==end&&(StartConf=QuickFormItemOptions.splice(start,1)[0],end<start?QuickFormItemOptions.splice(end,0,StartConf):QuickFormItemOptions.splice(end-1,0,StartConf),_emitEvent("optionChange")({targetOption:StartConf,start:start,end:end,currentOptions:JSON.stringify(_UTILS.getGlobalOptions())}),myThis.$forceUpdate())};return _UTILS.scope=myThis,_UTILS.emit=_emitVal,_UTILS.getModelValue=getModelValue,_UTILS.eventMap=eventMap,_UTILS.createEventMap=createEventMap,_UTILS.GetCombinationType=GetCombinationType,_UTILS.GetLayout=GetLayout,_UTILS.GetDrag=GetDrag,_UTILS.upDateFromData=upDateFromData,_UTILS.getMountModelValue=getMountModelValue,_UTILS.createElementDeep=createElementDeep,_UTILS.GetParentModelVal=GetParentModelVal,_UTILS.emitEvent=_emitEvent,_UTILS.parseDirective=ParseDirective,_UTILS.renderComponents=RenderComponents,_UTILS.clearHandleProps=ClearHandleProps,_UTILS.getComponentDeps=GetComponentDeps,_UTILS.parseTempSyntax=ParseTempSyntax,_UTILS.rulesState=RulesState,_UTILS.positionChanger=PositionChanger,_UTILS.getGlobalOptions=()=>myThis.quickOptions,_UTILS},MainRender=function(){return{render(){var formOptions=this.quickOptions.formOptions||[],UTILS=(this.depOptions,MountMainUtils(this));return ElementCreator.formFrame(formOptions,UTILS)}}},_QuickForm={...Props,..._Data,...Methods,...Dires,...MainRender()},QuickForm=function(argus){return h(_QuickForm,argus)},HasDirective=dir=>Boolean(Dires.directives[dir]),mount=function(app){app.component("quick-form",_QuickForm),_app=app};export default{install:mount};export{Throttling,QuickForm,HasDirective};